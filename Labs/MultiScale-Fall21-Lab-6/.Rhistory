t = amatrix[i, j-1] - 1.3
print (rownames(amatrix)[i])
print (colnames(amatrix)[j])
print ("")
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
alignmentMatrix(x, y, scoreMatrix(1, -1/3))
scoreMatrix <- function(mat, mis) {
lut <- matrix(mis, 4, 4)
diag(lut) <- mat
dimnames(lut) <- list(c("A", "C", "G", "U"), c("A", "C", "G", "U"))
return(lut)
}
alignmentMatrix<-function(seq1,seq2, scoreMat){
amatrix<- matrix(0, ncol=length(x)+1, nrow=length(y)+1)
rownames(amatrix) <- c("", y)
colnames(amatrix) <- c("", x)
print (amatrix)
for(i in 2:nrow(amatrix)) {
for(j in 2:ncol(amatrix)) {
l = amatrix[i-1, j] - 1.3
t = amatrix[i, j-1] - 1.3
print (rownames(amatrix)[i])
print (colnames(amatrix)[j])
print ("")
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
alignmentMatrix(x, y, scoreMatrix(1, -1/3))
scoreMatrix <- function(mat, mis) {
lut <- matrix(mis, 4, 4)
diag(lut) <- mat
dimnames(lut) <- list(c("A", "C", "G", "U"), c("A", "C", "G", "U"))
return(lut)
}
alignmentMatrix<-function(seq1,seq2, scoreMat){
amatrix<- matrix(0, ncol=length(x)+1, nrow=length(y)+1)
rownames(amatrix) <- c("", y)
colnames(amatrix) <- c("", x)
print (amatrix)
for(i in 2:nrow(amatrix)) {
for(j in 2:ncol(amatrix)) {
l = amatrix[i-1, j] - 1.3
t = amatrix[i, j-1] - 1.3
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
alignmentMatrix(x, y, scoreMatrix(1, -1.3))
scoreMatrix <- function(mat, mis) {
lut <- matrix(mis, 4, 4)
diag(lut) <- mat
dimnames(lut) <- list(c("A", "C", "G", "U"), c("A", "C", "G", "U"))
return(lut)
}
alignmentMatrix<-function(seq1,seq2, scoreMat){
amatrix<- matrix(0, ncol=length(x)+1, nrow=length(y)+1)
rownames(amatrix) <- c("", y)
colnames(amatrix) <- c("", x)
print (amatrix)
for(i in 2:nrow(amatrix)) {
for(j in 2:ncol(amatrix)) {
l = amatrix[i-1, j] - 1/3
t = amatrix[i, j-1] - 1/3
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
alignmentMatrix(x, y, scoreMatrix(1, -1/3))
scoreMatrix <- function(mat, mis) {
lut <- matrix(mis, 4, 4)
diag(lut) <- mat
dimnames(lut) <- list(c("A", "C", "G", "U"), c("A", "C", "G", "U"))
return(lut)
}
alignmentMatrix<-function(seq1,seq2, scoreMat){
amatrix<- matrix(0, ncol=length(x)+1, nrow=length(y)+1)
rownames(amatrix) <- c("", y)
colnames(amatrix) <- c("", x)
for(i in 2:nrow(amatrix)) {
for(j in 2:ncol(amatrix)) {
l = amatrix[i-1, j] - 1.3
t = amatrix[i, j-1] - 1.3
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
alignmentMatrix(x, y, scoreMatrix(1, -1/3))
scoreMatrix <- function(mat, mis) {
lut <- matrix(mis, 4, 4)
diag(lut) <- mat
dimnames(lut) <- list(c("A", "C", "G", "U"), c("A", "C", "G", "U"))
return(lut)
}
alignmentMatrix<-function(seq1,seq2, scoreMat){
amatrix<- matrix(0, ncol=length(x)+1, nrow=length(y)+1)
rownames(amatrix) <- c("", y)
colnames(amatrix) <- c("", x)
for(i in 2:nrow(amatrix)) {
for(j in 2:ncol(amatrix)) {
l = amatrix[i-1, j] - 1.3
t = amatrix[i, j-1] - 1.3
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
alignmentMatrix(x, y, scoreMatrix(1, -0.333))
scoreMatrix <- function(mat, mis) {
lut <- matrix(mis, 4, 4)
diag(lut) <- mat
dimnames(lut) <- list(c("A", "C", "G", "U"), c("A", "C", "G", "U"))
return(lut)
}
alignmentMatrix<-function(seq1,seq2, scoreMat){
amatrix<- matrix(0, ncol=length(x)+1, nrow=length(y)+1)
rownames(amatrix) <- c("", y)
colnames(amatrix) <- c("", x)
for(i in 2:nrow(amatrix)) {
for(j in 2:ncol(amatrix)) {
l = amatrix[i-1, j] - 1
t = amatrix[i, j-1] - 1
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
alignmentMatrix(x, y, scoreMatrix(1, -1))
seq1 <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
seq2 <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
alignmentMatrix(seq1, seq2, scoreMatrix(3, -1))
seq1 <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
seq2 <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
alignmentMatrix(seq1, seq2, scoreMatrix(3, -1))
seq1 <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
seq2 <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
alignmentMatrix(seq1, seq2, scoreMatrix(3, -1))
seq1 <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
seq2 <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
alignmentMatrix(seq1, seq2, scoreMatrix(3, -1))
x <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
y <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
alignmentMatrix(x, y, scoreMatrix(3, -1))
x <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
y <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
lut <- matrix(-1, 5, 5)
diag(lut) <- 3
dimnames(lut) <- list(c("A", "C", "G", "T", "-"), c("A", "C", "G", "T", "-"))
lut[, "-"] <- -2
lut["-", ] <- -2
alignmentMatrix(x, y, lut)
y <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
x <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
lut <- matrix(-1, 5, 5)
diag(lut) <- 3
dimnames(lut) <- list(c("A", "C", "G", "T", "-"), c("A", "C", "G", "T", "-"))
lut[, "-"] <- -2
lut["-", ] <- -2
alignmentMatrix(x, y, lut)
alignmentMatrix <- function(seq1, seq2, scoreMat){
amatrix<- matrix(0, ncol=length(x)+1, nrow=length(y)+1)
rownames(amatrix) <- c("", y)
colnames(amatrix) <- c("", x)
gapDec <- scoreMat["-", ][[1]]
for(i in 2:nrow(amatrix)) {
for(j in 2:ncol(amatrix)) {
l = amatrix[i-1, j] - gapDec
t = amatrix[i, j-1] - gapDec
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
y <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
x <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
lut <- matrix(-1, 5, 5)
diag(lut) <- 3
dimnames(lut) <- list(c("A", "C", "G", "T", "-"), c("A", "C", "G", "T", "-"))
lut[, "-"] <- -2
lut["-", ] <- -2
alignmentMatrix(x, y, lut)
alignmentMatrix <- function(seq1, seq2, scoreMat){
amatrix<- matrix(0, ncol=length(x)+1, nrow=length(y)+1)
rownames(amatrix) <- c("", y)
colnames(amatrix) <- c("", x)
gapDec <- scoreMat["-", ][[1]]
for(i in 2:nrow(amatrix)) {
for(j in 2:ncol(amatrix)) {
l = amatrix[i-1, j] + gapDec
t = amatrix[i, j-1] + gapDec
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
y <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
x <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
lut <- matrix(-1, 5, 5)
diag(lut) <- 3
dimnames(lut) <- list(c("A", "C", "G", "T", "-"), c("A", "C", "G", "T", "-"))
lut[, "-"] <- -2
lut["-", ] <- -2
alignmentMatrix(x, y, lut)
alignmentMatrix <- function(seq1, seq2, scoreMat){
amatrix<- matrix(0, ncol=length(x)+1, nrow=length(y)+1)
rownames(amatrix) <- c("", y)
colnames(amatrix) <- c("", x)
gap <- scoreMat["-", ][[1]]
for(i in 2:nrow(amatrix)) {
for(j in 2:ncol(amatrix)) {
l = amatrix[i-1, j] + gap
t = amatrix[i, j-1] + gap
lt = amatrix[i-1, j-1] + scoreMat[rownames(amatrix)[i], colnames(amatrix)[j]]
amatrix[i, j] <- max(l, t, lt, 0)
}
}
return(amatrix)
}
y <- strsplit("GATCCATTAAGCGCAAATGGCCA", "")[[1]]
x <- strsplit("GATTTCAGGCAGTACA", "")[[1]]
lut <- matrix(-1, 5, 5)
diag(lut) <- 3
dimnames(lut) <- list(c("A", "C", "G", "T", "-"), c("A", "C", "G", "T", "-"))
lut[, "-"] <- -2
lut["-", ] <- -2
alignmentMatrix(x, y, lut)
source("pairAlign.R")
pairAlign("GATCCATTAAGCGCAAATGGCCA", "GATTTCAGGCAGTACA", substitutionMatrix = "lut", gapExtension = -2, type = "local")
y <- strsplit("MVWHDVDEGFHTAVW", "")[[1]]
x <- strsplit("AHDVGVWGHDD", "")[[1]]
pairAlign("MVWHDVDEGFHTAVW", "AHDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -12, gapExtension = -3, type = "global")
#modified version of generateSeqsWithMultinomialModel() from https://a-little-book-of-r-for-bioinformatics.readthedocs.io/en/latest/src/chapter4.html
generateSeqs <- function(inputsequence, X){
#split inputted string into vector of individual characters
inputsequencevector <- strsplit(inputsequence,"")[[1]]
mylength <- length(inputsequencevector)
mytable <- table(inputsequencevector)
letters <- rownames(mytable)
probabilities <- mytable/mylength #store the probabilities of letters
#sample total number of characters needed to generate X random sequences of length myLength
seqset <- sample(letters, mylength*X, rep=TRUE, prob=probabilities)
#apply paste0() to collapse vector of characters into a vector of character strings of the original length
seqs <- vapply(seq(1, mylength*X, mylength), function(i) paste0(seqset[i:(i+(mylength-1))], collapse = ''), inputsequence)
return(seqs)
}
generateSeqs("MVWHDVDEGFHT", 5)
for (seq in generateSeqs("MVWHDVDEGFHT", 5)) {
print (seq)
}
scores <- numeric(2000)
seqs <- generateSeqs("MVWHDVDEGFHT", 2000)
for (i in 1:length(seqs)) {
scores[i] <- pairAlign(seqs[i], "HDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -10, gapExtension = -2, scoreOnly = FALSE, type="global")
}
pairAlign("MVWHDVDEGFHTAVW", "AHDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -12, gapExtension = -3, type = "global", scoreOnly=FALSE)
pairAlign("MVWHDVDEGFHTAVW", "AHDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -12, gapExtension = -3, type = "global", scoreOnly=TRUE)
scores <- numeric(2000)
seqs <- generateSeqs("MVWHDVDEGFHT", 2000)
for (i in 1:length(seqs)) {
scores[i] <- pairAlign(seqs[i], "HDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -10, gapExtension = -2, scoreOnly = TRUE, type="global")
}
hist(scores)
scores <- numeric(2000)
seqs <- generateSeqs("MVWHDVDEGFHT", 2000)
count <- 0
for (i in 1:length(seqs)) {
score <- pairAlign(seqs[i], "HDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -10, gapExtension = -2, scoreOnly = TRUE, type="global")
if (score >= -22) {
count <- count + 1
}
scores[i] <- score
}
count/2000
scores <- numeric(2000)
seqs <- generateSeqs("MVWHDVDEGFHT", 2000)
for (i in 1:length(seqs)) {
scores[i] <- pairAlign(seqs[i], "HDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -10, gapExtension = -2, scoreOnly = TRUE, type="global")
}
hist(scores, xlab="Alignment Scores", ylab="Counts", main="Histogram of alignment scores between HDVGVWGHDD")
count <- 0
for (score in scores) {
if (score >= -22) {
count <- count + 1
}
}
count/length(seqs)
scores <- numeric(2000)
seqs <- generateSeqs("MVWHDVDEGFHT", 2000)
for (i in 1:length(seqs)) {
scores[i] <- pairAlign(seqs[i], "AHDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -10, gapExtension = -2, scoreOnly = TRUE, type="global")
}
hist(scores, xlab="Alignment Scores", ylab="Counts", main="Histogram of alignment scores between HDVGVWGHDD")
count <- 0
for (score in scores) {
if (score >= -22) {
count <- count + 1
}
}
count/length(seqs)
y <- strsplit("MVWHDVDEGFHTAVW", "")[[1]]
x <- strsplit("AHDVGVWGHDD", "")[[1]]
pairAlign("MVWHDVDEGFHTAVW", "AHDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -12, gapExtension = -3, type = "global")
scores <- numeric(2000)
seqs <- generateSeqs("MVWHDVDEGFHT", 2000)
for (i in 1:length(seqs)) {
scores[i] <- pairAlign(seqs[i], "AHDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -10, gapExtension = -2, scoreOnly = TRUE, type="global")
}
hist(scores, xlab="Alignment Scores", ylab="Counts", main="Histogram of alignment scores between HDVGVWGHDD")
count <- 0
for (score in scores) {
if (score >= -22) {
count <- count + 1
}
}
count/length(seqs)
hist(scores, xlab="Alignment Scores", ylab="Counts", main="Histogram of alignment scores between AHDVGVWGHDD and permutations of MVWHDVDEGFHT")
count <- 0
for (score in scores) {
if (score >= -22) {
count <- count + 1
}
}
count/length(seqs)
hist(scores, xlab="Alignment Scores", ylab="Counts", main="Histogram of alignment scores")
count <- 0
for (score in scores) {
if (score >= -22) {
count <- count + 1
}
}
count/length(seqs)
scores <- numeric(2000)
seqs <- generateSeqs("MVWHDVDEGFHT", 2000)
for (i in 1:length(seqs)) {
scores[i] <- pairAlign(seqs[i], "AHDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -10, gapExtension = -2, scoreOnly = TRUE, type="global")
}
hist(scores, xlab="Alignment Scores", ylab="Counts", main="Histogram of alignment scores")
count <- 0
for (score in scores) {
if (score >= -22) {
count <- count + 1
}
}
count/length(seqs)
scores <- numeric(2000)
seqs <- generateSeqs("MVWHDVDEGFHT", 2000)
for (i in 1:length(seqs)) {
scores[i] <- pairAlign(seqs[i], "AHDVGVWGHDD", substitutionMatrix = "BLOSUM62", gapOpening = -10, gapExtension = -2, scoreOnly = TRUE, type="global")
}
hist(scores, xlab="Alignment Scores", ylab="Counts", main="Histogram of alignment scores")
count <- 0
for (score in scores) {
if (score >= -22) {
count <- count + 1
}
}
count/length(seqs)
# INPUT ARGUMENTS
# patterns : list of char vectors
#            each vector patterns[[i]] contains the version of the CENTER sequence that arises from the pairwise alignment between the center sequence and sequence[i]
# subjects : list of char vectors
#            each vector subjects[[i]] contains the alignment of sequence[i] after a pairwise alignment with the center sequence
# center   : integer
#            index of the sequence in the original sequence list that is the center.
buildMSA <- function(patterns, subjects, center) {
MSA <- rbind(patterns[[1]], subjects[[1]])
for(i in 2:length(patterns)) {
j = 1 #index in new row
k = 1 #index in alignment of center sequence to sequence i
m = 1 #column index of MSA
maxLength = ncol(MSA) + length(patterns[[i]])
newRow = character(maxLength)
while(k <= length(patterns[[i]]) && m <= ncol(MSA)) {
if(patterns[[i]][k] == MSA[1, m]) {
newRow[j] <- subjects[[i]][k]
j <- j + 1
k <- k + 1
m <- m + 1
} else if(MSA[1, m] == "-") {
newRow[j] <- "-"
j <- j + 1
m <- m + 1
} else if(patterns[[i]][k] == "-") {
if(m == 1) {
MSA <- cbind(rep("-", nrow(MSA)), MSA)
} else {
MSA <- cbind(MSA[, 1:(m-1)], rep("-", nrow(MSA)), MSA[, m:ncol(MSA)])
}
newRow[j] <- subjects[[i]][k]
m <- m + 1
j <- j + 1
k <- k + 1
}
}
while(k <= length(patterns[[i]])) {
MSA <- cbind(MSA, rep("-", nrow(MSA)))
newRow[j] <- subjects[[i]][k]
k <- k + 1
j <- j + 1
}
while(m <= ncol(MSA)) {
newRow[j] <- "-"
m <- m + 1
j <- j + 1
}
newRow <- newRow[1:(m - 1)]
MSA <- rbind(MSA, newRow)
}
rownames(MSA) <- c("    Center:", paste0("Sequence ", 1:(nrow(MSA)), ":")[-center])
colnames(MSA) <- 1:ncol(MSA)
return(MSA)
}
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE") #these are the sequences that you should be working with.
## Initialization
n <- length(sequences)
align1 <- matrix("", n, n)
align2 <- align1
## Generate alignments
for(i in 1:(n-1)) {
for(j in (i+1):n) {
alignment <- pairAlign(sequences[i], sequences[j], "BLOSUM62", gapOpening=-6, gapExtension=-3)
align1[j, i] <- alignment[[1]]
align2[i, j] <- alignment[[1]]
align2[j, i] <- alignment[[2]]
align1[i, j] <- alignment[[2]]
}
}
align1
## Initialization
n <- length(sequences)
align1 <- matrix("", n, n)
align2 <- align1
## Generate alignments
for(i in 1:(n-1)) {
for(j in (i+1):n) {
alignment <- pairAlign(sequences[i], sequences[j], "BLOSUM62", gapOpening=-6, gapExtension=-3)
align1[j, i] <- alignment[[1]]
align2[i, j] <- alignment[[1]]
align2[j, i] <- alignment[[2]]
align1[i, j] <- alignment[[2]]
}
}
align1
align2
distances <- sapply(mapply(`!=`, strsplit(align1, ""), strsplit(align2, "")), sum)
distanceMatrix <- matrix(distances, n, n)
dimnames(distanceMatrix) = list(peptides, peptides)
distanceMatrix
distances <- sapply(mapply(`!=`, strsplit(align1, ""), strsplit(align2, "")), sum)
distanceMatrix <- matrix(distances, n, n)
dimnames(distanceMatrix) = list(sequences, sequences)
distanceMatrix
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE")
distances <- sapply(mapply(`!=`, strsplit(align1, ""), strsplit(align2, "")), sum)
distanceMatrix <- matrix(distances, n, n)
dimnames(distanceMatrix) = list(sequences, sequences)
distanceMatrix
distances <- sapply(mapply(`!=`, strsplit(align1, ""), strsplit(align2, "")), sum)
distanceMatrix <- matrix(distances, n, n)
dimnames(distanceMatrix) = list(sequences, sequences)
distanceMatrix
sum(distanceMatrix)
distanceMatrix.col
columns(distanceMatrix)
cols(distanceMatrix)
col(distanceMatrix)
colnames(distanceMatrix)
max(sum(distanceMatrix[, colnames(distanceMatrix)])
sum(distanceMatrix[, colnames(distanceMatrix)]
distanceMatrix[, colnames(distanceMatrix)
distanceMatrix[, colnames(distanceMatrix)]
sum(distanceMatrix[, colnames(distanceMatrix)])
sumeach(distanceMatrix[, colnames(distanceMatrix)])
distanceMatrix[, colnames(distanceMatrix)]
distanceMatrix[, colnames(distanceMatrix)][[1]]
distanceMatrix[, colnames(distanceMatrix)][1]
distanceMatrix[, colnames(distanceMatrix)][1]
distanceMatrix[, colnames(distanceMatrix)][2]
distanceMatrix[, colnames(distanceMatrix)][5]
sapply(distanceMatrix, sum)
col(distanceMatrix)
?col
colSums(distanceMatrix)
max(colSums(distanceMatrix))
min(colSums(distanceMatrix))
which.min(colSums(distanceMatrix))
which.min(colSums(distanceMatrix))[[1]]
rowNames(which.min(colSums(distanceMatrix)))
rowName(which.min(colSums(distanceMatrix)))
rownames(which.min(colSums(distanceMatrix)))
which.min(colSums(distanceMatrix))
class(which.min(colSums(distanceMatrix)))
which.min(colSums(distanceMatrix))
names(which.min(colSums(distanceMatrix)))
names(which.min(colSums(distanceMatrix)))[1]
