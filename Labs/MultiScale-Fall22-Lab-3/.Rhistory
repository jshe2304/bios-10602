myvec <- 5:13 #1 pt
myvec[5] <- "Hi" #1 pt
myvec #1 pt
listFun <- function(list){
for(element in list){
print(class(element))
}
}
# Example;
listFun(motleyCrew)
b_subtilis <- read.fasta("Bacillus subtilis.fasta")[[1]]
windowStartPositions <- function(length, windowSize, stepSize) {
return(seq(1, length - windowSize + 1, stepSize))
}
slidingGC <- function(sequence, windowSize, stepSize) {
GCVector <- numeric(0)
for(start in windowStartPositions(length(sequence), windowSize, stepSize)) {
GCVector <- c(GCVector, GC(sequence[start:(start + windowSize - 1)]))
}
return(GCVector)
}
plotSlidingGC <- function(sequence, windowSize, stepSize) {
x <- windowStartPositions(length(sequence), windowSize, stepSize)
GCVector <- numeric(0)
for(start in x) {
GCVector <- c(GCVector, GC(sequence[start:(start + windowSize - 1)]))
}
plot(x, GCVector, type = "l")
}
skew <- function(sequence, i) {
return(sum(sequence[1:i] == "g") - sum(sequence[1:i] == "c"))
}
skewDiagram <- function(sequence) {
skewVector <- cumsum(sequence == "g") - cumsum(sequence == "c")
plot(seq(1, length(sequence), 8000), skewVector[seq(1, length(sequence), 8000)], xlab = "Nucleotide Position", ylab = "GC Skew")
}
#OR without using cumsum below
skewDiagram <- function(sequence) {
skewVector <- numeric(length(sequence) + 1)
for(i in 1:length(sequence)) {
if(sequence[i] == "g") {
skewVector[i+1] <- skewVector[i] + 1
} else if(sequence[i] == "c") {
skewVector[i+1] <- skewVector[i] - 1
} else {
skewVector[i+1] <- skewVector[i]
}
}
skewVector <- skewVector[-1]
plot(seq(1, length(sequence), 10000), skewVector[seq(1, length(sequence), 10000)], xlab = "Nucleotide Position", ylab = "GC Skew")
}
min_skew <- function(sequence) {
skewVector <- cumsum(sequence == "g") - cumsum(sequence == "c")
return(which.min(skewVector))
}
skewDiagram(ecoli) # 1 pt
install.packages('seqinr', repos='http://cran.us.r-project.org')
library("seqinr")
covid <- read.fasta(file="covid19.fasta")
covid_seq <- covid[[1]]
skewDiagram(ecoli) # 1 pt
skewDiagram(ecoli) # 1 pt
E_Coli <- read.fasta("E_coli.fasta")[[1]]
skewDiagram(ecoli) # 1 pt
skewDiagram(E_coli) # 1 pt
E_Coli <- read.fasta("E_coli.fasta")[[1]]
skewDiagram(E_coli)
setwd("~/Desktop/Fall-2021/Multi-Sacle-BIOS-10602-Fall21/MultiScale-Labs-Fall21/MultiSale-Fall21-Lab-3")
E_Coli <- read.fasta("E_coli.fasta")[[1]]
skewDiagram(E_Coli)
skewDiagram(E_Coli) # 1 pt
min_skew(E_Coli) # 1 pt
skewDiagram(E_Coli)
t_petrophila <- read.fasta("Thermotoga petrophila.fasta")[[1]]
skewDiagram(t_petrophila)
min_skew(t_petrophila)
install.packages('seqinr', repos='http://cran.us.r-project.org')
library("seqinr")
setwd("~/School/BIOS 10602/Labs/MultiScale-Fall22-Lab-3")
e_coli <- read.fasta(file="E_coli.fasta")
myvec <- 3:11
myvec
myvec[4] <- "Hi"
myvec
myvec <- 3:11
myvec[4] <- "Hi"
print (myvec)
class(e_coli)
motleyCrew <- list(char = c("a", "b", "c"), num = 1:7, func = sample, logic = TRUE, missing = NA, numberList = list(one = 1, two = 2, three = 3))
listTypes <- function(l) {
for (item in l) {
print (class(item))
}
}
listTypes(motleyCrew)
e_coli
e_coli_seq <- e_coli[[1]]
e_coli[1]
e_coli[[1]
]
e_coli_seq <- e_coli[[1]]
length(e_coli_seq)
e_coli_seq[:-26]
e_coli_seq[c(-26:-1)]
e_coli_seq[c(-1:-26)]
e_coli_seq[-26:-1]
e_coli_seq
e_coli_seq[-1]
e_coli_seq[,-1]
class(e_coli_seq)
e_coli_seq[[-1]]
e_coli
class(e_coli)
length(e_coli)
e_coli[[-1]]
e_coli[[1]]
e_coli[[2]]
e_coli <- read.fasta(file="E_coli.fasta")
class(e_coli)
names(e_coli)
e_coli_seq <- e_coli[[1]]
names(e_coli_seq)
e_coli_seq <- e_coli[[1]][1]
e_coli_seq
e_coli_seq <- e_coli[[1]]
class(e_coli_seq)
e_coli_seq[1]
e_coli_seq[2]
e_coli_seq[-1]
e_coli_seq[length(e_coli_seq)]
e_coli_seq[length(e_coli_seq)+1]
e_coli_seq[length(e_coli_seq) - 26:]
e_coli_seq[length(e_coli_seq) - 26:length(e_coli_seq)]
length(e_coli_seq)
e_coli_seq[20:25]
l <- length(e_coli_seq)
e_coli_seq[l-5:l]
e_coli_seq[l]
l
e_coli_seq[l:l]
e_coli_seq[l-1:l]
l
e_coli_seq[4641650:l]
l-26
e_coli_seq[4641626:l]
e_coli_seq[(l-26):l]
length(e_coli_seq[(l-26):l])
length(e_coli_seq[(l-25):l])
e_coli_seq[l]
e_coli_seq[l-1]
l <- length(e_coli_seq)
e_coli_seq[(l-26):l]
l <- length(e_coli_seq)
e_coli_seq[(l-25):l]
init_strand <- c("c", "g", "a", "g", "a", "c", "a")
for (nt in rev(init_strand)): nt
for (nt in rev(init_strand)){}
for (nt in rev(init_strand)){}
for (nt in rev(init_strand)){ nt }
for (nt in rev(init_strand)){
print (nt)
}
if True==True:"hello"
if (1==1) "hello"
compStrand <- function(seq) {
switchNT <- function(nt) {
if (nt == "c") return ("g")
if (nt == "g") return ("c")
if (nt == "t") return ("a")
if (nt == "a") return ("t")
}
comp <- numeric(length(seq))
for (i in 1:length(seq)) {
comp[length(seq) - i + 1] <- switchNT(seq[i])
}
return (comp)
}
compStrand(init_strand)
init_strand
table(e_coli_seq)
frequencyAdenine <- function(seq) {
return (table(seq)$a)
}
frequencyAdenine(e_coli_seq)
frequencyAdenine <- function(seq) {
return (table(seq)["a"])
}
frequencyAdenine(e_coli_seq)
frequencyAdenine <- function(seq) {
return (table(seq)["a"]/length(seq))
}
frequencyAdenine(e_coli_seq)
length(e_coli_seq)
1142742/4641652
frequencyThymine <- function(seq) {
return (table(seq)["t"]/length(seq))
}
frequencyThymine(e_coli_seq)
seqWeight <- function(seq, type="DNA") {
dnaWeight <- function(nt) {
if (nt == "c") return (289.2)
if (nt == "g") return (329.2)
if (nt == "t") return (304.2)
if (nt == "a") return (313.2)
}
rnaWeight <- function(nt) {
if (nt == "c") return (305.2)
if (nt == "g") return (345.2)
if (nt == "u") return (306.2)
if (nt == "a") return (329.2)
}
if (type == "DNA") {
sum <- 0
for (nt in seq) {
sum <- sum + dnaWeight(nt)
}
return (sum)
}
sum <- 0
for (nt in seq) {
sum <- sum + rnaWeight(nt)
}
return (sum)
}
seq <- c("g", "g", "t", "a", "t", "t", "c", "c", "g", "a", "g", "a", "c", "a")
seqWeight(seq)
GC_Content <- function(seq) {
counts <- table(seq)
return ((counts["g"] + counts["c"])/length(seq))
}
GC_Content(e_coli_seq)
GC(e_coli_seq)
windowStartPositions <- function(seq, size, step) {
return (seq(1:length(seq):step))
}
windowStartPositions <- function(length, size, step) {
return (seq(1:length:step))
}
windowStartPositions(length(seq), 4000, 4000)
windowStartPositions(1, length(seq), 4000)
windowStartPositions(length(seq), 4000, 4000)
windowStartPositions(length(e_coli_seq), 4000, 4000)
seq(1:length(e_coli_seq):4000)
seq(1,length(e_coli_seq),4000)
seq(1,length(e_coli_seq),4000)[length(seq(1,length(e_coli_seq),4000))]
windowStartPositions <- function(length, size, step) {
return (seq(1, length(sequence) - size + 1, step))
}
windowStartPositions(length(e_coli_seq), 4000, 4000)
windowStartPositions <- function(length, size, step) {
return (seq(1, length - size + 1, step))
}
windowStartPositions(length(e_coli_seq), 4000, 4000)
tail(windowStartPositions(length(e_coli_seq), 4000, 4000))
tail(windowStartPositions(length(e_coli_seq), 4000, 1000))
slidingGC <- function(seq, size, step) {
for (start in windowStartPositions(length(seq), size, step)) {
print (start, start + 4000)
}
}
slidingGC(e_coli_seq, 4000, 4000)
slidingGC <- function(seq, size, step) {
for (start in windowStartPositions(length(seq), size, step)) {
print (start)
print (start + 4000)
}
}
slidingGC(e_coli_seq, 4000, 4000)
slidingGC <- function(seq, size, step) {
for (start in windowStartPositions(length(seq), size, step)) {
print (GC_Content(seq[start:start+step-1]))
}
}
slidingGC(e_coli_seq, 4000, 4000)
slidingGC <- function(seq, size, step) {
windows <- windowStartPositions(length(seq), size, step)
gc <- numeric(length(windows))
print (length(gc))
}
slidingGC(e_coli_seq, 4000, 4000)
slidingGC <- function(seq, size, step) {
windows <- windowStartPositions(length(seq), size, step)
return(GC_Content(seq[windows, windows+step-1]))
}
slidingGC(e_coli_seq, 4000, 4000)
slidingGC <- function(seq, size, step) {
windows <- windowStartPositions(length(seq), size, step)
return(GC_Content(seq[windows:windows+step-1]))
}
slidingGC(e_coli_seq, 4000, 4000)
slidingGC <- function(seq, size, step) {
windows <- windowStartPositions(length(seq), size, step)
gc <- length(windows)
for (i in 1:length(windows)) {
gc[i] <- GC_Content(seq[windows[i]:windows[i] + size - 1])
}
return (gc)
}
slidingGC(e_coli_seq, 4000, 4000)
windows
windows <- windowStartPositions(length(seq), size, step)
windows <- windowStartPositions(length(e_coli_seq), 4000, 4000)
windows
length(windows)
gc <- length(windows)
for (i in 1:length(windows)) {
gc[i] <- GC_Content(seq[windows[i]:windows[i] + 4000 - 1])
}
gc
gc <- length(windows)
gc
1:length(windows)
slidingGC <- function(seq, size, step) {
windows <- windowStartPositions(length(seq), size, step)
gc <- length(windows)
for (i in 1:length(windows)) {
gc[i] <- GC_Content(seq[windows[i]:(windows[i]+size-1)])
}
return (gc)
}
slidingGC(e_coli_seq, 4000, 4000)
plotSlidingGC() <- function(seq, size, step) {
gc <- slidingGC(seq, size, step)
plot(gc, 1:length(gc), pch=".", type="o")
}
plotSlidingGC <- function(seq, size, step) {
gc <- slidingGC(seq, size, step)
plot(gc, 1:length(gc), pch=".", type="o")
}
plotSlidingGC(e_coli_seq, 4000, 4000)
plotSlidingGC <- function(seq, size, step) {
gc <- slidingGC(seq, size, step)
plot(x=1:length(gc), y=gc, pch=".", type="o")
}
plotSlidingGC(e_coli_seq, 4000, 4000)
plotSlidingGC(e_coli_seq, 4000, 1000)
plotSlidingGC(e_coli_seq, 1000, 1000)
plotSlidingGC(e_coli_seq, 1000, 4000)
plotSlidingGC <- function(seq, size, step) {
gc <- slidingGC(seq, size, step)
plot(x=1:length(gc), y=gc, pch=".", type="o", main="GC Content versus Sequence Position", xlab="Sequence Window", ylab="GC Content")
}
plotSlidingGC(e_coli_seq, 1000, 4000)
plotSlidingGC <- function(seq, size, step) {
plot(x=windowStartPositions(length(seq), size, step), y=slidingGC(seq, size, step), pch=".", type="o", main="GC Content versus Sequence Position", xlab="Sequence Window", ylab="GC Content")
}
plotSlidingGC(e_coli_seq, 4000, 4000)
plotSlidingGC(e_coli_seq, 4000, 1000)
plotSlidingGC(e_coli_seq, 10000, 1000)
plotSlidingGC <- function(seq, size, step) {
plot(x=windowStartPositions(length(seq), size, step), y=slidingGC(seq, size, step), main="GC Content versus Sequence Position", xlab="Sequence Window", ylab="GC Content")
}
plotSlidingGC(e_coli_seq, 10000, 1000)
plotSlidingGC <- function(seq, size, step) {
plot(x=windowStartPositions(length(seq), size, step), y=slidingGC(seq, size, step), pch=".", type="o", main="GC Content versus Sequence Position", xlab="Sequence Window", ylab="GC Content")
}
plotSlidingGC(e_coli_seq, 10000, 1000)
plotSlidingGC(e_coli_seq, 4000, 1000)
plotSlidingGC(e_coli_seq, 4000, 10000)
plotSlidingGC <- function(seq, size, step) {
plot(x=windowStartPositions(length(seq), size, step), y=slidingGC(seq, size, step), pch=".", type="o", main="GC Content versus Sequence Position", xlab="Sequence Window Position", ylab="GC Content")
}
plotSlidingGC(e_coli_seq, 4000, 5000)
plotSlidingGC(e_coli_seq, 4000, 1000)
plotSlidingGC(e_coli_seq, 10000, 10000)
plotSlidingGC(e_coli_seq, 50000, 50000)
s_solfataricus <- read.fasta("Sulfolobus solfataricus.fasta")[[1]]
t_petrophila <- read.fasta("Thermotoga petrophila.fasta")[[1]]
covid <- read.fasta("covid19.fasta")[[1]]
skew <- function(seq, i) {
t <- table(seq[1:i])
return (table["g"] - table["c"])
}
skew(e_coli_seq, 10)
skew <- function(seq, i) {
t <- table(seq[1:i])
return (t["g"] - t["c"])
}
skew(e_coli_seq, 10)
skew(e_coli_seq, length(e_coli_seq))
skewDiagram(seq) {
skewDiagram <- function(seq) {
skew <- 0
for (i in 1:length(seq)) {
if (seq[i] == "g") skew <- skew + 1
else if (seq[i] == "c") skew <- skew - 1
plot(x=i, y=skew)
}
}
skewDiagram(e_coli_seq)
skewDiagram(e_coli_seq)
length(t_solfataricus)
length(s_solfataricus)
length(e_coli_seq)
length(t_petrophila)
skewDiagram(t_petrophila)
skewDiagram <- function(seq) {
skew <- 0
skews <- numeric(length(seq))
for (i in 1:length(seq)) {
if (seq[i] == "g") {
skew <- skew + 1
} else if (seq[i] == "c") {
skew <- skew - 1
}
skews[i] <- skew
}
plot(x=skew[seq(1, length(skew), 8000)], y=seq(1, length(skew), 8000), main="Skew Diagram", ylab="Skew")
}
skewDiagram(t_petrophila)
skewDiagram <- function(seq) {
skew <- 0
skews <- numeric(length(seq))
for (i in 1:length(seq)) {
if (seq[i] == "g") {
skew <- skew + 1
} else if (seq[i] == "c") {
skew <- skew - 1
}
skews[i] <- skew
}
plot(y=skew[x=seq(1, length(skew), 8000), seq(1, length(skew), 8000)], main="Skew Diagram", ylab="Skew")
}
skewDiagram(t_petrophila)
skewDiagram <- function(seq) {
skew <- 0
skews <- numeric(length(seq))
for (i in 1:length(seq)) {
if (seq[i] == "g") {
skew <- skew + 1
} else if (seq[i] == "c") {
skew <- skew - 1
}
skews[i] <- skew
}
plot(y=skews[x=seq(1, length(skews), 8000), seq(1, length(skews), 8000)], main="Skew Diagram", ylab="Skew")
}
skewDiagram(t_petrophila)
skewDiagram <- function(seq) {
skew <- 0
skews <- numeric(length(seq))
for (i in 1:length(seq)) {
if (seq[i] == "g") {
skew <- skew + 1
} else if (seq[i] == "c") {
skew <- skew - 1
}
skews[i] <- skew
}
plot(x=seq(1, length(skews), 8000), y=skews[seq(1, length(skews), 8000)], main="Skew Diagram", ylab="Skew")
}
skewDiagram(t_petrophila)
min_skew <- function(seq) {
skew <- 0
minskew <- Inf
min <- 0
for (i in 1:length(seq)) {
if (seq[i] == "g") {
skew <- skew + 1
} else if (seq[i] == "c") {
skew <- skew - 1
}
if (skew < minskew) {
minskew <- skew
min <- i
}
}
return (min)
}
min_skew(t_petrophila)
skewDiagram(s_solfataricus)
min_skew(s_solfataricus)
skewDiagram(t_petrophila)
min_skew(t_petrophila)
skewDiagram <- function(seq) {
skew <- 0
skews <- numeric(length(seq))
for (i in 1:length(seq)) {
if (seq[i] == "g") {
skew <- skew + 1
} else if (seq[i] == "c") {
skew <- skew - 1
}
skews[i] <- skew
}
plot(x=seq(1, length(skews), 100), y=skews[seq(1, length(skews), 100)], main="Skew Diagram", ylab="Skew")
}
skewDiagram(covid_seq)
skewDiagram(covid)
min_skew(t_petrophila)
skewDiagram(t_petrophila)
skewDiagram(covid_seq)
min_skew(covid_seq)
